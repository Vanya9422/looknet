<?php

namespace App\Utils\Translates;

use App\Enums\Mails\SendCodeContentTextEnum;
use BenSampo\Enum\Enum;
use InvalidArgumentException;

/**
 * Класс для перевода значений перечислений (enums), которые реализуют интерфейс TranslatableEnum.
 *
 * EnumTranslator предоставляет централизованный способ для получения локализованных названий
 * значений перечисления в приложении. Это полезно, когда значения перечисления используются
 * в пользовательском интерфейсе и должны быть представлены на разных языках.
 */
class EnumTranslator
{
    /**
     * Получает переводы для значений заданного перечисления.
     * Этот метод может быть использован для динамического получения переводов основанных на значениях перечисления,
     * что делает его очень гибким в различных сценариях использования.
     *
     * Если массив ключей не предоставлен, метод возвращает переводы для всех значений перечисления.
     * Если предоставлен массив ключей, метод возвращает переводы только для этих ключей.
     * Это позволяет получить переводы для конкретного подмножества значений перечисления.
     *
     * @param string $enumClass Имя класса перечисления, для которого требуются переводы.
     * @param array|null $keys Опционально, массив ключей, для которых нужно получить переводы.
     * @param string|null $locale Опционально, локаль для перевода. Если не указана, используется текущая локаль приложения.
     *
     * @return array Ассоциативный массив, где ключи - это значения перечисления,
     *               а значения - соответствующие локализованные строки.
     *
     * @throws InvalidArgumentException Если переданный класс не реализует интерфейс TranslatableEnum.
     */
    public static function translate(string $enumClass, ?array $keys = null, ?string $locale = null): array
    {
        // Проверка на то, что класс перечисления реализует необходимый интерфейс TranslatableEnum.
        if (!is_subclass_of($enumClass, Enum::class)) {
            // Если нет, выбрасывается исключение.
            throw new InvalidArgumentException("The class {$enumClass} must implement BenSampo\Enum Abstract class.");
        }

        // Инициализация массива для хранения переведенных значений.
        $translatedValues = [];

        // Получение значений перечисления. Если ключи не предоставлены, возвращаются все значения.
        $values = $enumClass::getValues($keys);

        // Перебор значений и получение соответствующих переводов.
        foreach ($values as $value) {
            // Получение ключа локализации для текущего значения перечисления.
            $localizationKey = $enumClass::getTranslationKey($value);
            // Добавление перевода в массив переведенных значений.
            $translatedValues[$value] = __($localizationKey, [], $locale);
        }

        // Возвращение ассоциативного массива переведенных значений.
        return $translatedValues;
    }
}
